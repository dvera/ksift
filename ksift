#!/usr/bin/env bash

usage() {
  echo "Usage: $(basename $0) sequences.fa" 1>&2
  echo "" 1>&2
  echo "" 1>&2
  exit 1
}

################################
### PARSE COMMAND LINE ARGS ####
################################

while getopts ":i:takmfslx" opt; do
  case $opt in
  t)
   NTHREADS=$OPTARG
   ;;
  a)
   MAXAT=$OPTARG
   ;;
  k)
   K=$OPTARG
   ;;
  m)
   MINMEDIAN=$OPTARG
   ;;
  f)
   FIRSTK=$OPTARG
   ;;
  s)
   HASHSIZE=$OPTARG
   ;;
  l)
   MINREADLENGTH=$OPTARG
   ;;
  x)
   MAXREADLENGTH=$OPTARG
   ;;
  \?)
   echo "Invalid option: -$OPTARG" >&2
   usage
   ;;
  [?])
   usage
   ;;
  :)
   echo "Option -$OPTARG requires an argument." >&2
   echo "" >&2
   usage
   ;;
  esac
done

shift $((OPTIND-1))

if [ -z $NTHREADS ]; then
  NTHREADS=1
fi

if [ -z $MAXAT ]; then
  MAXAT=0.7
fi

if [ -z $K ]; then
  K=10
fi

if [ -z $MINMEDIAN ]; then
  MINMEDIAN=5
fi

if [ -z $FIRSTK ]; then
  FIRSTK=10
fi

if [ -z $HASHSIZE ]; then
  HASHSIZE=100000
fi

if [ -z $MINREADLENGTH ]; then
  MINREADLENGTH=1000
fi

if [ -z $MAXREADLENGTH ]; then
  MAXREADLENGTH=1000000
fi


if [[ -z $@ ]]; then
  INPUT=$(cat /dev/stdin)
else
  INPUT=$@
fi

# check if jellyfish2 is in $PATH
jellyfish --version 2>/dev/null | grep "jellyfish 2" > /dev/null
LAC=$?
if [ $LAC -gt 0 ]; then
  2>&1 echo "jellyfish 2 not found in $PATH"
  exit 1
fi

while IFS=$'\t' read -r name sequence; do
  echo -e "${name}\n${sequence}" | \
  jellyfish count --disk -o /dev/stdout -L 2 --text -s $HASHSIZE -m $K /dev/stdin | \
  tail -n+2 | sort -k2,2nr | \
  awk IFS=$'\t' -v k=$K -v maxAT=$MAXAT -v topkmers=$FIRSTK -v filename=$name -v sequence=$sequence -v minmedian=$MINMEDIAN '{
    a=gsub("A","A",$1);b=gsub("T","T",$1)
    if(((a+b)/k) < maxAT){
      goodkmers+=1
    }
    if(goodkmers==int(topkmers/2) && $2>=minmedian){
      print filename"\n"sequence; exit
    }
  }'
done < <(
  awk IFS=$'\t' '{
    if($1~">"){
      print "~"$0"<"
    }else{
      print $0
    }
  }' $INPUT | \
  tr -d '\n' | \
  tr '~' '\n' | \
  tr '<' '\t' | \
  awk IFS=$'\t' -v minl=$MINREADLENGTH -v maxl=$MAXREADLENGTH '{l=length($2);if(l>=minl && l<=maxl){print $1,$2}}' OFS='\t'
)
